
import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
// FIX: Import Source type to be used in the return value.
import { EbookForm, Source } from '../types';

// FIX: Update function to return content and sources from Google Search grounding.
export const generateEbookContent = async (formData: EbookForm): Promise<{ content: string, sources: Source[] }> => {
  if (!process.env.API_KEY) {
    // In a real deployed environment, this might be handled differently,
    // but for local dev, it's a useful check.
    // FIX: Update mock response to match the new return type.
    return Promise.resolve({
      content: "API Key n√£o configurada. Por favor, adicione sua chave API para testar a funcionalidade. Este √© um conte√∫do de exemplo para demonstra√ß√£o, gerado com a nova estrutura.\n\nCapa\n\nT√≠tulo: Um Guia de Exemplo\n\nSubt√≠tulo: Demonstrando a nova estrutura de prompt\n\nPref√°cio\n\nEste e-book serve como uma demonstra√ß√£o da estrutura aprimorada...",
      sources: []
    });
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const tema = `
- Assunto Principal: ${formData.subject}
- P√∫blico-alvo: ${formData.audience}
- Tom de Voz: ${formData.tone}`;

  const autor = `
- Nome do Autor: ${formData.authorName}
- Especialidade do Autor: ${formData.authorSpecialty}
- Dedicat√≥ria: ${formData.dedication || 'Nenhuma'}`;

  const estrutura = `
- N√∫mero de Cap√≠tulos: ${formData.chapters}
- N√∫mero Aproximado de P√°ginas: ${formData.pages}`;

  const prompt = `
    Voc√™ √© um gerador de e-books did√°ticos.
    Sua tarefa √© criar um e-book bem estruturado, organizado e pronto para diagrama√ß√£o.
    Use as informa√ß√µes abaixo preenchidas pelo usu√°rio:

    üìñ Tema: ${tema}

    ‚úçÔ∏è Autor/Estilo: ${autor}

    üìå Estrutura desejada: ${estrutura}

    ### Estrutura obrigat√≥ria do e-book:
    1.  **Capa (t√≠tulo e subt√≠tulo sugestivos)**
    2.  **Pref√°cio**
        - Texto em terceira pessoa, institucional e motivacional.
        - N√£o cite nomes reais.
    3.  **√çndice numerado**
    4.  **Cap√≠tulos**
        - Cada cap√≠tulo deve conter:
          - Introdu√ß√£o curta
          - Conte√∫do claro e did√°tico
          - Exemplo pr√°tico ou analogia
          - Pergunta de reflex√£o ao final
    5.  **Conclus√£o**
        - S√≠ntese geral do conte√∫do
        - Checklist pr√°tico com principais aprendizados
    6.  **Vers√≠culos, frases ou cita√ß√µes** (se o tema permitir)
    7.  **Refer√™ncias** (liste livros, artigos e especialistas relevantes com seus nomes e t√≠tulos, n√£o apenas links. Use a pesquisa web para encontrar esta informa√ß√£o, mas formate-a como uma bibliografia.)

    ### Regras de escrita:
    - Linguagem clara, envolvente e acess√≠vel.
    - Estrutura bem organizada, com t√≠tulos e subt√≠tulos.
    - N√£o invente dados ou n√∫meros falsos.
    - Evite cita√ß√µes de pessoas reais (exceto autores ou fontes citadas nas refer√™ncias).
    - Use a pesquisa na web para encontrar e citar autores, livros, artigos ou especialistas relevantes como refer√™ncias.
    - Revise o texto final para garantir que n√£o h√° palavras estranhas ou erros de digita√ß√£o (ex: "alegras" em vez de "alegrias"). A criatividade √© bem-vinda, mas o texto deve ser coeso e fazer sentido.

    ### Regras de Formata√ß√£o de Sa√≠da:
    - O texto de sa√≠da deve ser puro (plain text), sem nenhum caractere de formata√ß√£o markdown.
    - N√ÉO use asteriscos (*) para negrito, it√°lico ou listas.
    - N√ÉO use cerquilhas (#) para t√≠tulos. Em vez disso, use quebras de linha e letras mai√∫sculas para indicar se√ß√µes.

    O resultado deve estar pronto para ser salvo em banco de dados e exportado como PDF.
    Gere o texto completo do e-book em portugu√™s, seguindo estritamente esta estrutura e as regras de escrita.
  `;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
        config: {
            tools: [{googleSearch: {}}],
        },
    });
    
    // FIX: Extract sources from grounding metadata and return both content and sources.
    const sources = (response.candidates?.[0]?.groundingMetadata?.groundingChunks as Source[]) || [];
    return { content: response.text, sources };

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Falha ao gerar o conte√∫do do e-book. Por favor, tente novamente.");
  }
};